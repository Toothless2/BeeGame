//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BeeGame.Resources {
    using System;
    using System.Collections.Generic;
    using UnityEngine;
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BeeGame.Resources.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Prefabs {
            get {
                object obj = ResourceManager.GetObject("Prefabs", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Sprites {
            get {
                object obj = ResourceManager.GetObject("Sprites", resourceCulture);
                return ((byte[])(obj));
            }
        }

        internal static Dictionary<string, Sprite> GetSprites()
        {
            string[] splitCharacters = new string[] { "," };
            object obj = ResourceManager.GetObject("Sprites", resourceCulture);

            string text = System.Text.Encoding.Default.GetString((byte[])obj);
            string lineText = "";
            string[] splitText;
            Texture2D tex;
            Dictionary<string, Sprite> sprites = new Dictionary<string, Sprite>();

            for (int i = 0; i < text.Length; i++)
            {
                if (text[i] != '\n')
                {
                    lineText += text[i];
                }
                else
                {
                    splitText = lineText.Split(splitCharacters, StringSplitOptions.RemoveEmptyEntries);
                    lineText = "";
                    tex = UnityEngine.Resources.Load("Sprites/" + splitText[1]) as Texture2D;
                    sprites.Add(splitText[0], Sprite.Create(tex, new UnityEngine.Rect(0, 0, tex.width, tex.height), Vector2.zero));
                }
            }

            splitText = lineText.Split(splitCharacters, StringSplitOptions.RemoveEmptyEntries);
            lineText = "";
            tex = UnityEngine.Resources.Load("Sprites/" + splitText[1]) as Texture2D;
            sprites.Add(splitText[0], Sprite.Create(tex, new UnityEngine.Rect(0, 0, tex.width, tex.height), Vector2.zero));

            return sprites;
        }

        internal static Dictionary<string, GameObject> GetPrefabs()
        {
            string[] splitCharacters = new string[] { "," };
            object obj = ResourceManager.GetObject("Prefabs", resourceCulture);

            string text = System.Text.Encoding.Default.GetString((byte[])obj);
            text = text.Remove(0, 3);
            string lineText = "";
            string[] splitText;
            Dictionary<string, GameObject> objects = new Dictionary<string, GameObject>();

            for (int i = 0; i < text.Length; i++)
            {
                if(text[i] != '\n')
                {
                    lineText += text[i];
                }
                else
                {
                    splitText = lineText.Split(splitCharacters, StringSplitOptions.RemoveEmptyEntries);
                    lineText = "";
                    objects.Add(splitText[0], UnityEngine.Resources.Load("Prefabs/" + splitText[1]) as GameObject);
                }
            }
            
            splitText = lineText.Split(splitCharacters, StringSplitOptions.RemoveEmptyEntries);
            lineText = "";
            objects.Add(splitText[0], UnityEngine.Resources.Load("Prefabs/" + splitText[1]) as GameObject);

            return objects;
        }
    }
}
